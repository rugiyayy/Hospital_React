.banner {
  margin: 22px 0;
  background: #fff;
  background: url("../img/bg/22.jpg") no-repeat 50% 50%;
  background-size: cover;
  min-height: 330px;
  width: 100%;
  max-width: 100%;
  position: relative;
  z-index: 100;

  .overlay {
    position: absolute;
    width: 100%;
    height: 100%;
    opacity: 0.9;
    background: #223a66;
    z-index:-1;
  }

}


.card_text{
    overflow-wrap:unset;
    word-wrap: break-word;
    word-break: normal;
    hyphens: auto;
    overflow: hidden;
}


.banner_2 {
  background: url("../img/bg/banner.jpg") no-repeat;
}

// https://stackoverflow.com/questions/64891008/save-checkbox-state-after-page-reload


/*
import {
  Box,
  Button,
  Card,
  CardBody,
  CardFooter,
  CardHeader,
  Checkbox,
  Container,
  Flex,
  HStack,
  Image,
  Input,
  InputGroup,
  InputLeftElement,
  SimpleGrid,
  Spinner,
  Stack,
  Text,
} from "@chakra-ui/react";

import React, { useEffect, useState } from "react";
import styles from "../../assets/styles/doctor.module.scss";
import { colors } from "../../components/Constants";
import { Section } from "@react-email/components";
import { useQuery } from "react-query";
import { httpClient } from "../../utils/httpClient";
import { Search2Icon } from "@chakra-ui/icons";
import { Link, useLocation, useNavigate } from "react-router-dom";
export default function Doctor() {
  const location = useLocation();
  const navigate = useNavigate();

  const { isLoading, data, error } = useQuery("doctor", () => {
    return httpClient.get("/doctor");
  });
  const {
    isLoading: doctorTypeLoading,
    data: doctorType,
    error: doctorTypeError,
  } = useQuery("docType", () => {
    return httpClient.get("/DoctorType");
  });

  const {
    isLoading: departmentLoading,
    data: department,
    error: departmentError,
  } = useQuery("department", () => {
    return httpClient.get("/department");
  });

  const [searchTerm, setSearchTerm] = useState("");

  const [selectedFilters, setSelectedFilters] = useState(() => {
    const urlParams = new URLSearchParams(location.search);
    const selectedDoctorTypes = urlParams
      .getAll("doctorType")
      .map((type) => type.toLowerCase());
    const selectedDepartments = urlParams
      .getAll("department")
      .map((dep) => dep.toLowerCase());
    return { selectedDoctorTypes, selectedDepartments };
  });

  useEffect(() => {
    const urlParams = new URLSearchParams(location.search);
    urlParams.delete("doctorType");
    urlParams.delete("department");

    selectedFilters.selectedDoctorTypes.forEach((type) =>
      urlParams.append("doctorType", type)
    );
    selectedFilters.selectedDepartments.forEach((department) =>
      urlParams.append("department", department)
    );
    navigate(`?${urlParams.toString()}`);
  }, [selectedFilters, location.search, navigate]);

  if (isLoading || doctorTypeLoading || departmentLoading) {
    return (
      <div className={styles.spinner}>
        <Spinner size="xl" /> <h1>Loading</h1>
      </div>
    );
  }

  const filteredData = data?.data.filter((doctor) => {
    const nameMatches = doctor.fullName
      .toLowerCase()
      .includes(searchTerm.toLowerCase());

    const typeMatches =
      selectedFilters.selectedDoctorTypes.length === 0 ||
      selectedFilters.selectedDoctorTypes.includes(
        doctor.doctorTypeName.toLowerCase()
      );

    const departmentMatches =
      selectedFilters.selectedDepartments.length === 0 ||
      selectedFilters.selectedDepartments.includes(
        doctor.departmentName.toLowerCase()
      );

    return nameMatches && typeMatches && departmentMatches;
  });

  const handleCheckboxChange = (e, value, filterType) => {
    const isChecked = e.target.checked;
    setSelectedFilters((prev) => {
      const updatedSelection = isChecked
        ? { ...prev, [filterType]: [...prev[filterType], value] }
        : {
            ...prev,
            [filterType]: prev[filterType].filter((item) => item !== value),
          };
      return updatedSelection;
    });
  };

  return (
    <main>
      <Section>
        <Flex
          w="100%"
          justifyContent="center"
          alignItems="center"
          flexDirection="column"
          className={styles.banner}
        >
          <Box zIndex="10" className={styles.overlay} />
          <Text color="white" as="p" fontSize="1xl">
            All Doctors
          </Text>
          <Text color="white" as="b" fontWeight="700" fontSize="5xl">
            Specalized doctors
          </Text>
        </Flex>
      </Section>

      <Section className={styles.dep_list}>
        <Container maxW="72%">
          <Box>
            <Text
              width="100%"
              mb="12px"
              padding="4rem 0  20px"
              textAlign="center"
              color={colors.secondary}
              fontSize="38px"
              fontWeight="bold"
              position="relative"
              _after={{
                right: "47.4%",
                content: '" "',
                top: "100%",
                position: "absolute",
                width: "4%",
                borderTop: "4px solid #e12454",
              }}
            >
              Doctors
            </Text>
            <Text
              textAlign="center"
              color={colors.paragraph}
              margin="20px auto "
              w="60%"
            >
              We provide a wide range of creative services adipisicing elit.
              Autem maxime rem modi eaque, voluptate. Beatae officiis neque
            </Text>
          </Box>
          {data?.data.length > 0 && (
            <InputGroup w="50%" margin="0 auto">
              <InputLeftElement pointerEvents="none">
                <Search2Icon marginLeft={3} color="gray.600" />
              </InputLeftElement>
              <Input
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                borderRadius="20px"
                type="text"
                placeholder="Search by Doctor's Full Name"
              />
            </InputGroup>
          )}
          <Box>
            {doctorType?.data?.map((type) => (
              <Stack spacing={5} direction="column">
                <Checkbox
                  key={type.id}
                  value={type.name.toLowerCase()}
                  checked={selectedFilters.selectedDoctorTypes.includes(
                    type.name.toLowerCase()
                  )}
                  onChange={(e) =>
                    handleCheckboxChange(
                      e,
                      type.name.toLowerCase(),
                      "selectedDoctorTypes"
                    )
                  }
                  isDisabled={
                    doctorTypeLoading ||
                    doctorTypeError ||
                    isLoading ||
                    error ||
                    data?.data.length === 0
                  }
                >
                  {type.name}
                </Checkbox>
              </Stack>
            ))}

            {department?.data.map((dep) => (
              <Stack spacing={5} direction="column">
                <Checkbox
                  key={dep.id}
                  value={dep.name.toLowerCase()}
                  checked={selectedFilters.selectedDepartments.includes(
                    dep.name.toLowerCase()
                  )}
                  onChange={(e) =>
                    handleCheckboxChange(
                      e,
                      dep.name.toLowerCase(),
                      "selectedDepartments"
                    )
                  }
                >
                  {dep.name}
                </Checkbox>
              </Stack>
            ))}
          </Box>
          <Box
            color={colors.primary}
            fontWeight="700"
            fontSize="28px"
            textAlign="center"
            margin="0 auto"
          >
            {data == null && error != null && (
              <Text as="h1">Failed to get doctors</Text>
            )}

            {doctorType == null && doctorTypeError != null && (
              <Text as="h1">Failed to get doctor Types</Text>
            )}
            {doctorType == null && doctorTypeError == null && doctorTypeLoading}

            {department == null && departmentError != null && (
              <Text as="h1">Failed to get Departments</Text>
            )}
            {department == null && departmentError == null && departmentLoading}

            {data?.data.length == 0 && <Text as="h1">No doctors ...</Text>}

            {data == null && error == null && isLoading}

            {filteredData?.length === 0 && data?.data.length !== 0 && (
              <>
                {searchTerm && (
                  <Text as="h1">
                    {selectedFilters.selectedDepartments.length !== 0 ||
                    selectedFilters.selectedDoctorTypes.length !== 0
                      ? `There are no items matching "${searchTerm}" for the selected filters.`
                      : `There are no items matching "${searchTerm}".`}
                  </Text>
                )}
                {!searchTerm && (
                  <Text as="h1">
                    {selectedFilters.selectedDepartments.length !== 0 ||
                    selectedFilters.selectedDoctorTypes.length !== 0
                      ? "No items found for the selected filters."
                      : "No items found."}
                  </Text>
                )}
              </>
            )}
          </Box>

          <SimpleGrid
            spacing={4}
            templateColumns="repeat(auto-fill, minmax(200px, 1fr))"
          >
            {filteredData?.map((doctor, i) => (
              <Card key={doctor.id}>
                <CardHeader>
                  <Link color={colors.paragraph} to="/">
                    {doctor.docPhoto?.photoPath != null && (
                      <Image
                        padding="20px"
                        objectFit="cover"
                        width="400vw"
                        height="300"
                        src={`https://localhost:7041/Images/${doctor.docPhoto?.photoPath}`}
                        borderRadius="lg"
                      />
                    )}
                    {doctor.docPhoto?.photoPath == null && (
                      <Image
                        objectFit="cover"
                        width="400"
                        height="300"
                        src={`https://t4.ftcdn.net/jpg/01/86/29/31/360_F_186293166_P4yk3uXQBDapbDFlR17ivpM6B1ux0fHG.jpg`}
                        borderRadius="lg"
                      />
                    )}
                  </Link>
                </CardHeader>
                <CardBody>
                  <Text> {doctor.fullName}</Text>
                </CardBody>
                <CardFooter>
                  <Button>View here</Button>
                </CardFooter>
              </Card>
            ))}
          </SimpleGrid>
        </Container>
      </Section>
    </main>
  );
}*/